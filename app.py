# app.py
# ============================================
# üì¶ Web App: Wine Quality Analyzer (Decision Tree)
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deploy ‡∏ö‡∏ô Render ‡∏´‡∏£‡∏∑‡∏≠ Hugging Face
# ============================================

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import gradio as gr
import os

# ----------------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Decision Tree)
# ----------------------------------------------------
model_accuracy = 0.0
best_params = {}

try:
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv("winequality-red.csv")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á label (1 = ‡∏î‡∏µ, 0 = ‡πÑ‡∏°‡πà‡∏î‡∏µ)
    df['quality_label'] = df['quality'].apply(lambda v: 1 if v >= 7 else 0)

    X = df.drop(['quality', 'quality_label'], axis=1)
    y = df['quality_label']
    FEATURE_COLUMNS = list(X.columns)

    # ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train/test
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.1, random_state=42, stratify=y
    )

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hyperparameter ‡∏Ç‡∏≠‡∏á Decision Tree
    param_grid = {
        'criterion': ['gini', 'entropy'],
        'max_depth': [10, 20, None],
        'min_samples_split': [2, 5],
        'min_samples_leaf': [1, 2]
    }

    # ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πâ‡∏ß‡∏¢ GridSearchCV
    dt = DecisionTreeClassifier(random_state=42)
    grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, cv=3, n_jobs=-1, verbose=1)
    grid_search.fit(X_train, y_train)

    # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    model = grid_search.best_estimator_
    best_params = grid_search.best_params_

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    predictions = model.predict(X_test)
    accuracy = accuracy_score(y_test, predictions)
    model_accuracy = accuracy

    print(f"‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏• (Decision Tree) ‡∏ù‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    print(f"üìä Best Parameters: {best_params}")
    print(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ö‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {model_accuracy * 100:.2f}%\n")

except FileNotFoundError:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå 'winequality-red.csv'")
    FEATURE_COLUMNS = [
        'fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
        'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
        'ph', 'sulphates', 'alcohol'
    ]
    model = None
    scaler = None


# ----------------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
# ----------------------------------------------------
def predict_quality(*features):
    if model is None or scaler is None:
        return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV)"
    try:
        features_dict = {col: val for col, val in zip(FEATURE_COLUMNS, features)}
        df_new = pd.DataFrame([features_dict])
        df_new = df_new[FEATURE_COLUMNS]

        new_scaled = scaler.transform(df_new)
        probabilities = model.predict_proba(new_scaled)[0]
        prediction_index = np.argmax(probabilities)
        confidence = probabilities[prediction_index]

        result_text = "üç∑ ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ" if prediction_index == 1 else "üç∑ ‡πÑ‡∏ß‡∏ô‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏î‡∏µ"
        return f"{result_text} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {confidence:.2%})"

    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"


# ----------------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: UI ‡∏Ç‡∏≠‡∏á Gradio
# ----------------------------------------------------
feature_translations = {
    "fixed acidity": "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà", 
    "volatile acidity": "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏£‡∏∞‡πÄ‡∏´‡∏¢‡∏á‡πà‡∏≤‡∏¢",
    "citric acid": "‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏î‡∏ã‡∏¥‡∏ï‡∏£‡∏¥‡∏Å", 
    "residual sugar": "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", 
    "chlorides": "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå",
    "free sulfur dioxide": "‡∏Ñ‡πà‡∏≤‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏≠‡∏¥‡∏™‡∏£‡∏∞", 
    "total sulfur dioxide": "‡∏Ñ‡πà‡∏≤‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "density": "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô", 
    "ph": "‡∏Ñ‡πà‡∏≤‡∏û‡∏µ‡πÄ‡∏≠‡∏ä", 
    "sulphates": "‡∏Ñ‡πà‡∏≤‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï", 
    "alcohol": "‡∏Ñ‡πà‡∏≤‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå"
}

with gr.Blocks(theme=gr.themes.Soft(primary_hue="rose", secondary_hue="rose")) as demo:
    gr.Markdown(
        """<div style="text-align: center;"><h1>Grandeur Wine Analyzer üç∑</h1><p>‡πÉ‡∏™‡πà‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå‡πÅ‡∏î‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</p></div>"""
    )
    
    gr.Markdown(
        f"""<div style="text-align: center; padding: 10px; border: 1px solid #E5E7EB; border-radius: 0.5rem; background-color: #F9FAFB;"><h3 style="margin:0;">üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: <strong>{model_accuracy:.2%}</strong></h3></div>"""
    )
    
    inputs_list = [
        gr.Number(label=f"{col.replace('_', ' ').title()} ({feature_translations.get(col, '')})", value=0)
        for col in FEATURE_COLUMNS
    ]

    gr.Examples(
        examples=[
            [7.3,0.65,0.0,1.2,0.065,15.0,21.0,0.9946,3.39,0.47,10.0],
            [7.8,0.58,0.02,2.0,0.073,9.0,18.0,0.9968,3.36,0.57,9.5],
            [6.7,0.58,0.08,1.8,0.097,15.0,65.0,0.9959,3.28,0.54,9.2]
        ],
        inputs=inputs_list,
        label="üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡∏ô‡πå (Click to Try)"
    )

    with gr.Row():
        predict_button = gr.Button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡∏ô‡πå (Predict)", variant="primary")
        clear_button = gr.ClearButton(value="‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Clear)")

    output_text = gr.Textbox(label="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (Predicted Quality)", interactive=False, text_align="center", show_copy_button=True)

    with gr.Accordion("üìò ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ (Feature Descriptions)", open=False):
        gr.Markdown(
            """
            - **Fixed Acidity:** ‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡πÄ‡∏´‡∏¢‡∏á‡πà‡∏≤‡∏¢  
            - **Volatile Acidity:** ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏£‡∏î‡∏≠‡∏∞‡∏ã‡∏¥‡∏ï‡∏¥‡∏Å ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏°‡∏™‡∏≤‡∏¢‡∏ä‡∏π  
            - **Citric Acid:** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡∏ô‡πå  
            - **Residual Sugar:** ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏±‡∏Å  
            - **Chlorides:** ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå  
            - **Free/Total Sulfur Dioxide:** ‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡∏ö‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏î‡∏ä‡∏±‡∏ô  
            - **Density:** ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå  
            - **pH:** ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á (‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥ = ‡∏Å‡∏£‡∏î‡∏™‡∏π‡∏á)  
            - **Sulphates:** ‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏à‡∏∏‡∏•‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå  
            - **Alcohol:** ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå  
            """
        )

    gr.Markdown(
        """<hr><p style='text-align: center; font-size: 0.8em; color: grey;'>‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ù‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Red Wine Quality | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Gradio üç∑</p>"""
    )
    
    predict_button.click(fn=predict_quality, inputs=inputs_list, outputs=output_text)
    clear_button.add(inputs_list + [output_text])

# ----------------------------------------------------
# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Render-compatible)
# ----------------------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 7860))
    demo.launch(server_name="0.0.0.0", server_port=port)
